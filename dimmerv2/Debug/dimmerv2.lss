
dimmerv2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001b2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000248  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000741  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000617  00000000  00000000  00000a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000352  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000385  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f1  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001906  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  8a:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setup_timer1>:

volatile uint8_t dimmingLevel = 255;  // Start at medium brightness
volatile uint32_t delayTime = 0;      // Computed delay time

void setup_timer1() {
	TCCR1B |= (1 << WGM12);  // Timer1 in CTC mode
  92:	8e b5       	in	r24, 0x2e	; 46
  94:	88 60       	ori	r24, 0x08	; 8
  96:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);  // Enable Timer1 compare match interrupt
  98:	89 b7       	in	r24, 0x39	; 57
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	89 bf       	out	0x39, r24	; 57
  9e:	08 95       	ret

000000a0 <delay_us_timer1>:
}

void delay_us_timer1(uint16_t delay) {
	OCR1A = delay;
  a0:	9b bd       	out	0x2b, r25	; 43
  a2:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
  a4:	1d bc       	out	0x2d, r1	; 45
  a6:	1c bc       	out	0x2c, r1	; 44
	TCCR1B |= (1 << CS10);  // Start Timer1 with no prescaler (1:1)
  a8:	8e b5       	in	r24, 0x2e	; 46
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	8e bd       	out	0x2e, r24	; 46
	while (!(TIFR & (1 << OCF1A)));  // Wait for match
  ae:	08 b6       	in	r0, 0x38	; 56
  b0:	04 fe       	sbrs	r0, 4
  b2:	fd cf       	rjmp	.-6      	; 0xae <delay_us_timer1+0xe>
	TCCR1B = 0;  // Stop timer
  b4:	1e bc       	out	0x2e, r1	; 46
	TIFR |= (1 << OCF1A);  // Clear match flag
  b6:	88 b7       	in	r24, 0x38	; 56
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	88 bf       	out	0x38, r24	; 56
  bc:	08 95       	ret

000000be <dimmer_init>:
}

void dimmer_init(void) {
	DDRD |= (1 << TRIAC_PIN);  // Set TRIAC pin as output
  be:	8c 9a       	sbi	0x11, 4	; 17
	DDRB &= ~(1 << ZERO_CROSS_PIN);  // Set INT2 (PB2) as input
  c0:	ba 98       	cbi	0x17, 2	; 23
	//DDRC |= (1 << ZC_DETECT_PIN);  // Set PC2 as output for debugging
	//PORTC &= ~(1 << ZC_DETECT_PIN); // Initialize low

	// Configure external interrupt on INT2 (falling edge)
	MCUCSR &= ~(1 << ISC2);
  c2:	84 b7       	in	r24, 0x34	; 52
  c4:	8f 7b       	andi	r24, 0xBF	; 191
  c6:	84 bf       	out	0x34, r24	; 52
	GICR |= (1 << INT2);
  c8:	8b b7       	in	r24, 0x3b	; 59
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	8b bf       	out	0x3b, r24	; 59

	setup_timer1();  // Initialize Timer1
  ce:	0e 94 49 00 	call	0x92	; 0x92 <setup_timer1>
	sei();            // Enable global interrupts
  d2:	78 94       	sei
  d4:	08 95       	ret

000000d6 <set_dimming_level>:
}

void set_dimming_level(uint8_t level) {
	dimmingLevel = level;
  d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	08 95       	ret

000000dc <__vector_3>:
}

// Interrupt service routine for zero-cross detection
ISR(INT2_vect) {
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	//PORTC |= (1 << ZC_DETECT_PIN);  // Debug ON

		if (dimmingLevel == 255) {
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	8f 3f       	cpi	r24, 0xFF	; 255
 104:	11 f4       	brne	.+4      	; 0x10a <__vector_3+0x2e>
			PORTD |=(1 << TRIAC_PIN);  // Ensure TRIAC is OFF
 106:	94 9a       	sbi	0x12, 4	; 18
			//PORTC &= ~(1 << ZC_DETECT_PIN); // Debug OFF
			return;  // Exit ISR, TRIAC won't fire
 108:	3b c0       	rjmp	.+118    	; 0x180 <__vector_3+0xa4>
		}
	// If dimming level is < 5, turn OFF TRIAC immediately
	if (dimmingLevel < 5) {
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	85 30       	cpi	r24, 0x05	; 5
 110:	10 f4       	brcc	.+4      	; 0x116 <__vector_3+0x3a>
		PORTD &= ~(1 << TRIAC_PIN);  // Ensure TRIAC is OFF
 112:	94 98       	cbi	0x12, 4	; 18
		//PORTC &= ~(1 << ZC_DETECT_PIN); // Debug OFF
		return;  // Exit ISR, TRIAC won't fire
 114:	35 c0       	rjmp	.+106    	; 0x180 <__vector_3+0xa4>
	}
	

	// Compute delayTime
	delayTime = ((uint16_t)((255 - dimmingLevel) * 260));
 116:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	28 1b       	sub	r18, r24
 120:	31 09       	sbc	r19, r1
 122:	44 e0       	ldi	r20, 0x04	; 4
 124:	51 e0       	ldi	r21, 0x01	; 1
 126:	24 9f       	mul	r18, r20
 128:	c0 01       	movw	r24, r0
 12a:	25 9f       	mul	r18, r21
 12c:	90 0d       	add	r25, r0
 12e:	34 9f       	mul	r19, r20
 130:	90 0d       	add	r25, r0
 132:	11 24       	eor	r1, r1
 134:	a0 e0       	ldi	r26, 0x00	; 0
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 13c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 140:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <__data_end+0x2>
 144:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <__data_end+0x3>

	// Apply delay before firing TRIAC
	if (delayTime > 0) {
 148:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 14c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 150:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
 154:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
 158:	89 2b       	or	r24, r25
 15a:	8a 2b       	or	r24, r26
 15c:	8b 2b       	or	r24, r27
 15e:	51 f0       	breq	.+20     	; 0x174 <__vector_3+0x98>
		delay_us_timer1(delayTime);
 160:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 164:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 168:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
 16c:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
 170:	0e 94 50 00 	call	0xa0	; 0xa0 <delay_us_timer1>
	}

	// Fire TRIAC with a longer pulse width (200µs)
	PORTD |= (1 << TRIAC_PIN);
 174:	94 9a       	sbi	0x12, 4	; 18
	delay_us_timer1(200);  // Use Timer1 for 200µs delay
 176:	88 ec       	ldi	r24, 0xC8	; 200
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 50 00 	call	0xa0	; 0xa0 <delay_us_timer1>
	PORTD &= ~(1 << TRIAC_PIN);
 17e:	94 98       	cbi	0x12, 4	; 18

	//PORTC &= ~(1 << ZC_DETECT_PIN); // Debug OFF
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <main>:
 #define F_CPU 16000000ul
#include <avr/io.h>
#include "dimmer.h"

int main() {
	dimmer_init();  // Initialize dimmer system
 1a2:	0e 94 5f 00 	call	0xbe	; 0xbe <dimmer_init>

	uint8_t dimmingLevel =5; // Example dimming level (range 0-255)
	set_dimming_level(dimmingLevel);  // Set the dimming level
 1a6:	85 e0       	ldi	r24, 0x05	; 5
 1a8:	0e 94 6b 00 	call	0xd6	; 0xd6 <set_dimming_level>
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <main+0xa>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
